--@module Class2Relational
--@property numberOfCallsToResolveTemp = 10 (catalogue = DefaultCatalogue)
--@property understandability = normal (catalogue = DefaultCatalogue)
--@property ratioOfTables = normal (catalogue = Class2RelationalCatalogue)
module Class2Relational;
create OUT : Relational from IN : Class;

--@rule Class2Table
--@property numberOfInputPatterns = 1 (catalogue = DefaultCatalogue)
--@property oclExpComplexity = low (catalogue = DefaultCatalogue)
--@property understandability = high (catalogue = DefaultCatalogue)
--@property ratioOfTables = normal (catalogue = Class2RelationalCatalogue)
rule Class2Table {
	from
		c : Class!Class
	to
		out : Relational!Table (
			name <- c.name,
			-- Columns are generated from Attributes in another rule not explicitly called here !
			col <- Sequence {key}->union(c.attr->select(e | not e.multiValued)),
			key <- Set {key}
		),
		key : Relational!Column (
			name <- 'objectId',
			type <- thisModule.objectIdType
		)
}

--@rule DataType2Type 
--@property understandability = high (catalogue = DefaultCatalogue)
--@property reusability = low (catalogue = DefaultCalogue)
--another comment
rule DataType2Type {
	from
		dt : Class!DataType
	to
		out : Relational!Type (
			name <- dt.name
		)
}

rule DataTypeAttribute2Column {
	from
		a : Class!Attribute (
			a.type.oclIsKindOf(Class!DataType) and not a.multiValued
		)
	to
		out : Relational!Column (
			name <- a.name,
			type <- a.type
		)
}

rule MultiValuedDataTypeAttribute2Column {
	from
		a : Class!Attribute (
			a.type.oclIsKindOf(Class!DataType) and a.multiValued
		)
	to
		out : Relational!Table (
			name <- a.owner.name + '_' + a.name,
			col <- Sequence {id, value}
		),
		id : Relational!Column (
			name <- a.owner.name.firstToLower() + 'Id',
			type <- thisModule.objectIdType
		),
		value : Relational!Column (
			name <- a.name,
			type <- a.type
		)
}

rule ClassAttribute2Column {
	from
		a : Class!Attribute (
			a.type.oclIsKindOf(Class!Class) and not a.multiValued
		)
	to
		foreignKey : Relational!Column (
			name <- a.name + 'Id',
			type <- thisModule.objectIdType
		)
}

rule MultiValuedClassAttribute2Column {
	from
		a : Class!Attribute (
			a.type.oclIsKindOf(Class!Class) and a.multiValued
		)
	to
		t : Relational!Table (
			name <- a.owner.name + '_' + a.name,
			col <- Sequence {id, foreignKey}
		),
		id : Relational!Column (
			name <- a.owner.name.firstToLower() + 'Id',
			type <- thisModule.objectIdType
		),
		foreignKey : Relational!Column (
			name <- a.name + 'Id',
			type <- thisModule.objectIdType
		)
}

